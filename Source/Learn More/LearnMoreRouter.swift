//
// MoleMapper
//
// Copyright (c) 2017-2022 OHSU. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// 1.  Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// 2.  Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.
//
// 3.  Neither the name of the copyright holder(s) nor the names of any contributors
// may be used to endorse or promote products derived from this software without
// specific prior written permission. No license is granted to the trademarks of
// the copyright holders even if such marks are included in this software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PDFKit

protocol LearnMoreRoutingLogic {
    func routeToPDFViewer(pdfName: String)
    func routeToRTFViewer(contents: RTFPacket)
    func routeToWarOnMelanoma()
    func routeToVideos()
}

struct RTFPacket {
    var topic: String
    var attributedText: NSAttributedString
}

class LearnMoreRouter: NSObject, LearnMoreRoutingLogic {
    private var title: String?
    private var attributedText: NSAttributedString?

    weak var viewController: LearnMoreViewController?

    func routeToVideos() {
        let sb = UIStoryboard(name: "Theater", bundle: nil)
        guard let vc = sb.instantiateInitialViewController() as? TheaterListViewController else { return }
        
        navigateTo(destination: vc, source: self.viewController)
    }
    
    func routeToPDFViewer(pdfName: String) {
        let sb = UIStoryboard(name: "PDFViewer", bundle: nil)
        guard let vc = sb.instantiateViewController(withIdentifier: "PDFViewController") as? PDFViewController else { return }
        vc.nameOfDocumentToView = pdfName
        
        navigateTo(destination: vc, source: self.viewController)
    }

    func routeToPDFViewerUsingURL(pdfURL: URL) {
        let sb = UIStoryboard(name: "PDFViewer", bundle: nil)
        guard let vc = sb.instantiateViewController(withIdentifier: "PDFViewController") as? PDFViewController else { return }
        vc.urlOfDocumentToView = pdfURL
        
        navigateTo(destination: vc, source: self.viewController)
    }

    func routeToRTFViewer(contents: RTFPacket) {
        title = contents.topic
        attributedText = contents.attributedText
        let sb = UIStoryboard(name: "RTFViewer", bundle: nil)
        let vc = sb.instantiateViewController(withIdentifier: "RTFViewController") as! RTFViewController
        vc.dataSource = self
        
        navigateTo(destination: vc, source: self.viewController)
    }
    
    

    // MARK: Routing
    func routeToWarOnMelanoma() {
        
        let sb = UIStoryboard(name: "WebViewer", bundle: nil)
        guard let vc = sb.instantiateViewController(withIdentifier: "WebViewController") as? WebViewController else { return }
        vc.setup(destination: "http://www.ohsu.edu/xd/health/services/dermatology/war-on-melanoma/melanoma-community-registry.cfm", contentType: .external)
        navigateTo(destination: vc, source: self.viewController)
    }
    
    func navigateTo(destination: UIViewController, source: UIViewController?) {
        guard let navigationController = source?.navigationController else {
            print("No navigation controller to push a new view controller \(String(describing: destination))")
            guard let sourceViewController = source else {
                print("no viewController set in router")
                return
            }
            destination.modalPresentationStyle = .fullScreen
            sourceViewController.present(destination, animated: true, completion: nil)
            return
        }
        
        navigationController.pushViewController(destination, animated: true)
    }
    
    func present(destination: UIViewController, source: UIViewController?) {
        guard let source = source else { return }
        destination.modalPresentationStyle = .fullScreen
        source.present(destination, animated: true, completion: nil)
    }

}

extension LearnMoreRouter: RTFViewerDatasource {
    func topic() -> String {
        return title ?? "No title"
    }
    
    func bodyText() -> NSAttributedString {
        return attributedText ?? NSAttributedString(string: "No text")
    }
    
    
}
